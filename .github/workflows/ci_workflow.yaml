name: ci_workflow

on:
  push:
    branches:
      - "main"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.11
        uses: actions/setup-python@v3
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Lint with flake8
        run: |
          # Stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Launch docker compose
        env:
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_HOST: ${{ secrets.MYSQL_HOST }}  
          CLIENT_ID: ${{ secrets.CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}  
        run: |
          docker compose up --build -d
          sleep 10
          docker ps -a

      - name: Wait for MySQL to be ready
        run: |
          for i in {1..10}; do
            if docker exec mysql-container mysqladmin ping -h localhost --silent; then
              echo "MySQL is ready!"
              break
            fi
            echo "Waiting for MySQL..."
            sleep 5
          done
      
      - name: Create tables from the API Endpoint
        run: |
          curl -X POST http://localhost:8001/create-tables
          sleep 10

      - name: Insert Spotify songs from the API endpoint
        run: |
          curl -X POST http://localhost:8001/spotify-top-50
          sleep 10

      - name: Get a track name from the song list, then get recommendations
        run: |
          RANDOM_NUMBER=$((RANDOM % 50 + 1))
          echo "Random number is $RANDOM_NUMBER"
          RESPONSE=$(curl -s -X POST -o response_body.txt http://localhost:8002/track_name_query?transaction_id=$RANDOM_NUMBER)
          TRACK=$(jq -r '.track_name' response_body.txt)
          echo "Track name: $TRACK"
          ENCODED_TRACK=$(echo $TRACK | sed 's/ /%20/g')
          RESPONSE=$(curl -s -X POST -o response_body.txt http://localhost:8002/get_recommendation?track_name=$ENCODED_TRACK)
          cat response_body.txt
          sleep 5

      - name: Close docker compose
        run: |
          docker compose down