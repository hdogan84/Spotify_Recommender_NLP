version: '3.8'

services:
  redis:
    image: redis:alpine
    container_name: redis-bde
    ports:
      - "6379:6379"
    networks:
      - app-network

  music-gateway-api:
    image: music-gateway-api:latest
    build:
      context: ./src/app
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - ./reports/logs/:/app/reports/logs/ #just bind the volume but NOT the file (which will be created as a volume by docker-compose if the file is not existent?)
    depends_on:
      - music-db-api
      - redis
    networks:
      - app-network

  music-db-api:
    image: music-db-api:latest
    build:
      context: ./src/database
      dockerfile: Dockerfile
    ports:
      - "8001:8001"
    volumes:
      - ./tools/sqlite/songs.db:/app/songs.db
      - ./reports/logs/:/app/reports/logs/
      
    networks:
      - app-network  

  music-recsys-api:
    image: music-recsys-api:latest
    build:
      context: ./src/recsys
      dockerfile: Dockerfile
    ports:
      - "8002:8002"
    volumes:
      - ./tools/sqlite/songs.db:/app/songs.db
      - ./reports/logs/:/app/reports/logs/
      - ./data/ML_models/:/app/ML_models/
      
    networks:
      - app-network   

networks: #this is essential i.e. the only way i got the containers to communicate via service-names together
  app-network:
    driver: bridge