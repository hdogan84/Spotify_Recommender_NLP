version: '3.8'

services:
  mysql:
    build:
      context: ./src/mysql
      args:
        MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
        MYSQL_DATABASE: ${MYSQL_DATABASE}
    container_name: mysql-container
    restart: always
    env_file:
      - ./.env
    ports:
      - "3306:3306"
    networks:
      - app-network


  redis:
    image: redis:alpine
    container_name: redis-bde
    ports:
      - "6379:6379"
    networks:
      - app-network

  adminer:
    image: adminer:latest
    container_name: adminer
    environment:
      ADMINER_DEFAULT_SERVER: mysql
    ports:
      - "8080:8080"
    depends_on:
      - mysql
    networks:
      - app-network

  music-gateway-api:
    image: music-gateway-api:latest
    build:
      context: ./src/app
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - ./reports/logs/:/app/reports/logs/ #just bind the volume but NOT the file (which will be created as a volume by docker-compose if the file is not existent?)
    depends_on:
      - music-db-api
      - redis
    networks:
      - app-network

  music-db-api:
    image: music-db-api:latest
    build:
      context: ./src/database
      dockerfile: Dockerfile
    ports:
      - "8001:8001"
    env_file:
      - ./.env
    depends_on:
      - mysql
    volumes:
      - ./reports/logs/:/app/reports/logs/
      - ./data/music-dataset-1950-to-2019/tcc_ceds_music.csv:/app/data/tcc_ceds_music.csv
      - ./tools/mysql_data_model/create_tables.py:/app/tools/mysql_data_model/create_tables.py
      - ./tools/mysql_data_model/inserts_from_csv.py:/app/tools/mysql_data_model/inserts_from_csv.py
      - ./tools/mysql_data_model/spotifytop50.py:/app/tools/mysql_data_model/spotifytop50.py
    networks:
      - app-network


  music-recsys-api:
    image: music-recsys-api:latest
    build:
      context: ./src/recsys
      dockerfile: Dockerfile
    ports:
      - "8002:8002"
    #env_file:
    #  - ./.env
    environment:
      - MYSQL_ROOT_PASSWORD
      - MYSQL_DATABASE
      - MYSQL_HOST
    volumes:
      - ./reports/logs/:/app/reports/logs/
      - ./data/ML_models/:/app/ML_models/ 
    networks:
      - app-network   

networks:
  app-network:
    driver: bridge